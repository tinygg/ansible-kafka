---
- name: Create kafka group
  group:
    name: '{{ kafka_group }}'
    state: present
  tags:
    - kafka_group

- name: Create kafka user
  user:
    name: '{{ kafka_user }}'
    group: '{{ kafka_group }}'
    state: present
    createhome: no
  tags:
    - kafka_user

- name: Check if Kafka has already been downloaded
  stat:
    path: '/tmp/kafka_{{ kafka_version_spark_prefix }}-{{ kafka_version }}.tgz'
  register: tmp_zip

- name: Download kafka
  get_url:
    url: '{{ kafka_download_url }}'
    dest: /tmp
  when: tmp_zip.stat.exists == False
  tags:
    - kafka_download

- name: Cleanup required directories
  file:
    path: '{{ item }}'
    state: absent
  with_items:
    - '{{ kafka_install_dir }}'
    - '{{ kafka_log_dirs }}'
    - '{{ kafka_dir }}'
  tags:
    - kafka_cleanup

- name: Creating required directories
  file:
    path: '{{ item }}'
    state: directory
    group: '{{ kafka_group }}'
    owner: '{{ kafka_user }}'
  with_items:
    - '{{ kafka_root_dir }}'
    - '{{ kafka_install_dir }}'
    - '{{ kafka_log_dirs }}'
  tags:
    - kafka_dirs

- name: Create symlink to kafka installation directory
  file:
    src: '{{ kafka_install_dir }}'
    dest: '{{ kafka_dir }}'
    state: link
    group: '{{ kafka_group }}'
    owner: '{{ kafka_user }}'
  tags:
    - kafka_dirs

- name: Unpack kafka
  unarchive:
    src: /tmp/kafka_{{ kafka_version_spark_prefix }}-{{ kafka_version }}.tgz
    dest: '{{ kafka_root_dir }}'
    copy: no
    group: '{{ kafka_group }}'
    owner: '{{ kafka_user }}'
  tags:
    - kafka_unpack

#- name: Create directory for symlink to kafka configuration files
#  file:
#    path: /etc/kafka
#    state: directory
#    group: '{{ kafka_group }}'
#    owner: '{{ kafka_user }}'
#  tags:
#    - kafka_dirs

- name: Template configuration file to server.properties
  template:
    src: server.properties.j2
    dest: '{{ kafka_dir }}/config/server.properties'
  notify:
    - Restart kafka service
  tags:
    - kafka_config

#- name: Template configuration file to zookeeper.properties
#  template:
#    src: zookeeper.properties.j2
#    dest: '{{ kafka_dir }}/config/zookeeper.properties'
#  tags:
#    - kafka_config

- name: Template configuration file to connect-standalone.properties
  template:
    src: connect-standalone.properties.j2
    dest: '{{ kafka_dir }}/config/connect-standalone.properties'
  tags:
    - kafka_config

- name: Template configuration file to connect-distributed.properties
  template:
    src: connect-distributed.properties.j2
    dest: '{{ kafka_dir }}/config/connect-distributed.properties'
  tags:
    - kafka_config

- name: Template configuration file to producer.properties
  template:
    src: producer.properties.j2
    dest: '{{ kafka_dir }}/config/producer.properties'
  tags:
    - kafka_config

- name: Template configuration file to consumer.properties
  template:
    src: consumer.properties.j2
    dest: '{{ kafka_dir }}/config/consumer.properties'
  tags:
    - kafka_config

#- name: Create symlink to kafka server properties file
#  file:
#    src: '{{ kafka_dir }}/config/server.properties'
#    dest: /etc/kafka/server.properties
#    state: link
#    group: '{{ kafka_group }}'
#    owner: '{{ kafka_user }}'
#  tags:
#    - kafka_config

#- name: Create symlink to kafka connect standalone properties file
#  file:
#    src: '{{ kafka_dir }}/config/connect-standalone.properties'
#    dest: /etc/kafka/connect-standalone.properties
#    state: link
#    group: '{{ kafka_group }}'
#    owner: '{{ kafka_user }}'
#  tags:
#    - kafka_config

#- name: Create symlink to kafka connect distributed properties file
#  file:
#    src: '{{ kafka_dir }}/config/connect-distributed.properties'
#    dest: /etc/kafka/connect-distributed.properties
#    state: link
#    group: '{{ kafka_group }}'
#    owner: '{{ kafka_user }}'
#  tags:
#    - kafka_config

#- name: Create symlink to kafka producer properties file
#  file:
#    src: '{{ kafka_dir }}/config/producer.properties'
#    dest: /etc/kafka/producer.properties
#    state: link
#    group: '{{ kafka_group }}'
#    owner: '{{ kafka_user }}'
#  tags:
#    - kafka_config

#- name: Create symlink to kafka consumer properties file
#  file:
#    src: '{{ kafka_dir}}/config/consumer.properties'
#    dest: /etc/kafka/consumer.properties
#    state: link
#    group: '{{ kafka_group }}'
#    owner: '{{ kafka_user }}'
#  tags:
#    - kafka_config

#- name: Template Kafka init.d service file
#  template:
#    src: kafka.initd.j2
#    dest: /etc/init.d/kafka
#    mode: 0755
#  notify:
#    - Reload initd
#    - Restart kafka service
#  when: ansible_distribution == "CentOS" and ansible_distribution_major_version == '6'
#  tags:
#    - kafka_service

- name: Template kafka systemd service file to /usr/lib/systemd/system/kafka.service
  template:
    src: kafka.service.j2
    dest: /etc/systemd/system/kafka.service
  notify:
    - Reload systemd
#    - Restart kafka service
  tags:
    - kafka_service

- name: Install and start the kafka service
  service:
    name: kafka
    state: restarted
    enabled: yes
  tags:
    - kafka_service

- name: Delete the kafka archive file
  file:
    path: /tmp/kafka_{{ kafka_version }}.tgz
    state: absent
  tags:
    - kafka_cleanup
